syntax = "proto3";
package rit.amanzi;
option java_package = "org.rti.amanzi.protobuf";
option java_multiple_files = true;

// `Struct` represents a structured data value, consisting of fields
// which map to dynamically typed values. In some languages, `Struct`
// might be supported by a native representation. For example, in
// scripting languages like JS a struct is represented as an
// object. The details of that representation are described together
// with the proto support for the language.
//
// The JSON representation for `Struct` is JSON object.
message Struct {
  // Unordered map of dynamically typed values.
  map<string, Value> fields = 1;
}

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of that
// variants, absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
message Value {
  // The kind of value.
  oneof kind {
    // Represents a null value.
    NullValue null_value = 1;
    // Represents a double value.
    double number_value = 2;
    // Represents a string value.
    string string_value = 3;
    // Represents a boolean value.
    bool bool_value = 4;
    // Represents a structured value.
    Struct struct_value = 5;
    // Represents a repeated `Value`.
    ListValue list_value = 6;
  }
}

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
//  The JSON representation for `NullValue` is JSON `null`.
enum NullValue {
  // Null value.
  NULL_VALUE = 0;
}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
message ListValue {
  // Repeated field of dynamically typed values.
  repeated Value values = 1;
}


message Timestamp {

  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}


message Source {
    message Site {
        enum SiteType {
            HUC8 = 0;
            HUC12 = 1;
            CATCHMENT = 2;

        }
        string name = 1;
        SiteType type = 2;
    }
    message Equipment {
        string name = 1;
        string serial = 2;
        string collectionMethod = 3;
        string description = 4;
    }

    string name = 1;
    string url = 2;
    Site site = 3;
    amanzi.Geometry location = 4;
    Equipment equipment = 5;
}


message Feature {
    Geometry geometry = 1;

    oneof id_type {
        string id = 11;
        sint64 int_id = 12;
    }

    repeated GValue values = 13; // unique values
    repeated uint32 properties = 14 ; // pairs of key/value indexes
    repeated uint32 custom_properties = 15; // arbitrary properties
}

message Geometry {
    Type type = 1;

    repeated uint32 lengths = 2 ; // coordinate structure in lengths
    repeated sint64 coords = 3 ; // delta-encoded integer values
    repeated Geometry geometries = 4;

    repeated GValue values = 13;
    repeated uint32 custom_properties = 15 ;

    enum Type {
        POINT = 0;
        MULTIPOINT = 1;
        LINESTRING = 2;
        MULTILINESTRING = 3;
        POLYGON = 4;
        MULTIPOLYGON = 5;
        GEOMETRYCOLLECTION = 6;
    }
}

message FeatureCollection {
    repeated Feature features = 1;

    repeated GValue values = 13;
    repeated uint32 custom_properties = 15 [packed = true];
}

message GValue {
    oneof value_type {
        string string_value = 1;
        double double_value = 2;
        uint64 pos_int_value = 3;
        uint64 neg_int_value = 4;
        bool bool_value = 5;
        string json_value = 6;
    }
}
message Unit {
    string displayName = 1;
    string name = 2;
    string abbrevation = 3;
}

message NaNValue {
    string value = 1;
}


enum NullValue {
    NullValue = 0;
}

message MissingValue {
    oneof value_type {
        NullValue null_value = 1;
        NaNValue nan_value = 2;
    }
}

message Parameter {
    enum ParameterType {
        OBSERVED = 0;
        MODELED = 1;
        COMPUTED = 2;
    }
    enum Qualifier {
        RAW = 0;
        VERIFIED = 1;
        FINAL = 2;
    }
    string name = 1;
    ParameterType type = 2;
    string method = 3;
    string description = 4;
    string format = 5;
    double min = 6;
    double max = 7;
    Qualifier quality = 8;
    MissingValue missingValue = 9;

    string units = 10;
}
message History{
    Timestamp modifiedOn = 1;
    string comment = 2;
    repeated string referenceIds = 3;
}


message TimeInterval {
    //The Interval representing the frequency of data e.g: PT1H (Every one hour)
    string interval = 1;
    //The timestamp of the first record in this timeseries
    Timestamp start = 2;
    //The timestamp of the last record in this timeseries
    Timestamp end = 3;
}

message TimeSeriesMetaInfo {
    enum TimeSeriesType {
        HISTORICAL = 0;
        REAL_TIME = 1;
        FORECAST = 2;
    }
    TimeSeriesType type = 1;
    Timestamp forecastTime = 2;
    bool approved = 3;
    amanzi.Source source = 4;
    amanzi.Parameter parameter = 5;
    amanzi.TimeInterval interval = 6;
    repeated amanzi.History history = 7;
}

message TimeRecord {
    Timestamp datetime = 1;
    Value value = 2;
}
message TimeSeries {
    // a UUID
    string id = 1;
    // timestamp this timeseries was instanciated
    Timestamp created = 2;
     // a meta object describing the timeseries
    TimeSeriesMetaInfo metaInfo = 3;
    // the time , value records of the timeseries
    repeated TimeRecord data = 4;
}